apply plugin: 'konan'

// Specify targets to build the framework: iOS and iOS simulator
konan.targets = ['ios_arm64', 'ios_x64']

konanArtifacts {
    def frameworksDir = "${projectDir}/Frameworks"
    def productsDir = frameworksDir
    // def helperLibDir = getHelperlibDirPath()
    def helperLibDir = frameworksDir

    interop("RxBlocking") {
        defFile "src/main/c_interop/RxBlocking.def" // TODO: path to .def

        compilerOpts "-F${productsDir}", "-F${helperLibDir}"
        linkerOpts "-F${productsDir}", "-F${helperLibDir}"

        includeDirs "${frameworksDir}/RxBlocking.framework/Headers"
    }

    interop("RxCocoa") {
        defFile "src/main/c_interop/RxCocoa.def" // TODO: path to .def

        compilerOpts "-F${productsDir}", "-F${helperLibDir}"
        linkerOpts "-F${productsDir}", "-F${helperLibDir}"

        includeDirs "${frameworksDir}/RxCocoa.framework/Headers/"
    }

    interop("RxSwift") {
        defFile "src/main/c_interop/RxSwift.def" // TODO: path to .def

        compilerOpts "-F${productsDir}", "-F${helperLibDir}"
        linkerOpts "-F${productsDir}", "-F${helperLibDir}"

        includeDirs "${frameworksDir}/RxSwift.framework/Headers/"
    }

    // Declare building into a framework.
    framework('Multiweather') {
        // The multiplatform support is disabled by default.
        enableMultiplatform true
        extraOpts '-module_name', ''

        libraries {
            artifact "RxBlocking"
            artifact "RxCocoa"
            artifact "RxSwift"
        }
    }
}

dependencies {
    // Specify dependency on a common project for Kotlin multiplatform build
    expectedBy project(':multiweather:common')
}

String getHelperlibDirPath() {
    String workspacePath = "MultiWeatherApp.xcworkspace"
    String scheme = "Multiweather"
    String sdk = "iphoneos"

    String path = runCommandForOutput(Arrays.asList("/bin/sh", "-c",
        ("xcodebuild -scheme ${scheme} -workspace ${workspacePath} ONLY_ACTIVE_ARCH=NO -sdk ${sdk} -configuration Debug -showBuildSettings " + 
        "| grep -m 1 \"TARGET_BUILD_DIR\" " + 
        "| cut -d= -f2").toString()))

    project.logger.debug("XCode helperlib path: $path")

    return path
}

String runCommandForOutput(List<String> params) {
    project.logger.debug("Running command " + params);

    ProcessBuilder pb = new ProcessBuilder(params);
    Process p;
    String result = "";
    try {
        p = pb.start();
        final BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));

        StringJoiner sj = new StringJoiner(System.getProperty("line.separator"));
        reader.lines().iterator().forEachRemaining { s -> sj.add(s) };
        result = sj.toString();

        p.waitFor();
        p.destroy();
    } catch (Exception e) {
        e.printStackTrace();
    }
    return result.trim();
}